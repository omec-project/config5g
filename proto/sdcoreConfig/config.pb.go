// SPDX-FileCopyrightText: 2021 Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: config.proto

package sdcoreConfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_SUCCESS Status = 0
	Status_FAILURE Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

type PccFlowDirection int32

const (
	PccFlowDirection_DOWNLINK      PccFlowDirection = 0
	PccFlowDirection_UPLINK        PccFlowDirection = 1
	PccFlowDirection_BIDIRECTIONAL PccFlowDirection = 2
	PccFlowDirection_UNSPECIFIED   PccFlowDirection = 3
)

// Enum value maps for PccFlowDirection.
var (
	PccFlowDirection_name = map[int32]string{
		0: "DOWNLINK",
		1: "UPLINK",
		2: "BIDIRECTIONAL",
		3: "UNSPECIFIED",
	}
	PccFlowDirection_value = map[string]int32{
		"DOWNLINK":      0,
		"UPLINK":        1,
		"BIDIRECTIONAL": 2,
		"UNSPECIFIED":   3,
	}
)

func (x PccFlowDirection) Enum() *PccFlowDirection {
	p := new(PccFlowDirection)
	*p = x
	return p
}

func (x PccFlowDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PccFlowDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (PccFlowDirection) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x PccFlowDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PccFlowDirection.Descriptor instead.
func (PccFlowDirection) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

type PccArpPc int32

const (
	PccArpPc_NOT_PREEMPT PccArpPc = 0
	PccArpPc_MAY_PREEMPT PccArpPc = 1
)

// Enum value maps for PccArpPc.
var (
	PccArpPc_name = map[int32]string{
		0: "NOT_PREEMPT",
		1: "MAY_PREEMPT",
	}
	PccArpPc_value = map[string]int32{
		"NOT_PREEMPT": 0,
		"MAY_PREEMPT": 1,
	}
)

func (x PccArpPc) Enum() *PccArpPc {
	p := new(PccArpPc)
	*p = x
	return p
}

func (x PccArpPc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PccArpPc) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (PccArpPc) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x PccArpPc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PccArpPc.Descriptor instead.
func (PccArpPc) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

type PccArpPv int32

const (
	PccArpPv_NOT_PREEMPTABLE PccArpPv = 0
	PccArpPv_PREEMPTABLE     PccArpPv = 1
)

// Enum value maps for PccArpPv.
var (
	PccArpPv_name = map[int32]string{
		0: "NOT_PREEMPTABLE",
		1: "PREEMPTABLE",
	}
	PccArpPv_value = map[string]int32{
		"NOT_PREEMPTABLE": 0,
		"PREEMPTABLE":     1,
	}
)

func (x PccArpPv) Enum() *PccArpPv {
	p := new(PccArpPv)
	*p = x
	return p
}

func (x PccArpPv) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PccArpPv) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (PccArpPv) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x PccArpPv) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PccArpPv.Descriptor instead.
func (PccArpPv) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

type PccFlowTos int32

const (
	PccFlowTos_HOPOPT PccFlowTos = 0
	PccFlowTos_ICMP   PccFlowTos = 1
	PccFlowTos_TCP    PccFlowTos = 6
	PccFlowTos_UDP    PccFlowTos = 17
)

// Enum value maps for PccFlowTos.
var (
	PccFlowTos_name = map[int32]string{
		0:  "HOPOPT",
		1:  "ICMP",
		6:  "TCP",
		17: "UDP",
	}
	PccFlowTos_value = map[string]int32{
		"HOPOPT": 0,
		"ICMP":   1,
		"TCP":    6,
		"UDP":    17,
	}
)

func (x PccFlowTos) Enum() *PccFlowTos {
	p := new(PccFlowTos)
	*p = x
	return p
}

func (x PccFlowTos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PccFlowTos) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[4].Descriptor()
}

func (PccFlowTos) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[4]
}

func (x PccFlowTos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PccFlowTos.Descriptor instead.
func (PccFlowTos) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

type PccFlowStatus int32

const (
	PccFlowStatus_ENABLED_UPLINK   PccFlowStatus = 0
	PccFlowStatus_ENABLED_DOWNLINK PccFlowStatus = 1
	PccFlowStatus_ENABLED          PccFlowStatus = 2
	PccFlowStatus_DISABLED         PccFlowStatus = 3
	PccFlowStatus_REMOVED          PccFlowStatus = 4
)

// Enum value maps for PccFlowStatus.
var (
	PccFlowStatus_name = map[int32]string{
		0: "ENABLED_UPLINK",
		1: "ENABLED_DOWNLINK",
		2: "ENABLED",
		3: "DISABLED",
		4: "REMOVED",
	}
	PccFlowStatus_value = map[string]int32{
		"ENABLED_UPLINK":   0,
		"ENABLED_DOWNLINK": 1,
		"ENABLED":          2,
		"DISABLED":         3,
		"REMOVED":          4,
	}
)

func (x PccFlowStatus) Enum() *PccFlowStatus {
	p := new(PccFlowStatus)
	*p = x
	return p
}

func (x PccFlowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PccFlowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[5].Descriptor()
}

func (PccFlowStatus) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[5]
}

func (x PccFlowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PccFlowStatus.Descriptor instead.
func (PccFlowStatus) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

type OpType int32

const (
	OpType_SLICE_ADD    OpType = 0
	OpType_SLICE_UPDATE OpType = 1
	OpType_SLICE_DELETE OpType = 2
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "SLICE_ADD",
		1: "SLICE_UPDATE",
		2: "SLICE_DELETE",
	}
	OpType_value = map[string]int32{
		"SLICE_ADD":    0,
		"SLICE_UPDATE": 1,
		"SLICE_DELETE": 2,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[6].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[6]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

type PlmnId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mcc           string                 `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc           string                 `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlmnId) Reset() {
	*x = PlmnId{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlmnId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlmnId) ProtoMessage() {}

func (x *PlmnId) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlmnId.ProtoReflect.Descriptor instead.
func (*PlmnId) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *PlmnId) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *PlmnId) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

type NSSAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sst           string                 `protobuf:"bytes,1,opt,name=Sst,proto3" json:"Sst,omitempty"`
	Sd            string                 `protobuf:"bytes,2,opt,name=Sd,proto3" json:"Sd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NSSAI) Reset() {
	*x = NSSAI{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NSSAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NSSAI) ProtoMessage() {}

func (x *NSSAI) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NSSAI.ProtoReflect.Descriptor instead.
func (*NSSAI) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *NSSAI) GetSst() string {
	if x != nil {
		return x.Sst
	}
	return ""
}

func (x *NSSAI) GetSd() string {
	if x != nil {
		return x.Sd
	}
	return ""
}

type QoS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uplink        int32                  `protobuf:"varint,1,opt,name=uplink,proto3" json:"uplink,omitempty"`
	Downlink      int32                  `protobuf:"varint,2,opt,name=downlink,proto3" json:"downlink,omitempty"`
	TrafficClass  string                 `protobuf:"bytes,3,opt,name=trafficClass,proto3" json:"trafficClass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QoS) Reset() {
	*x = QoS{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QoS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoS) ProtoMessage() {}

func (x *QoS) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoS.ProtoReflect.Descriptor instead.
func (*QoS) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *QoS) GetUplink() int32 {
	if x != nil {
		return x.Uplink
	}
	return 0
}

func (x *QoS) GetDownlink() int32 {
	if x != nil {
		return x.Downlink
	}
	return 0
}

func (x *QoS) GetTrafficClass() string {
	if x != nil {
		return x.TrafficClass
	}
	return ""
}

type GNodeB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Tac           int32                  `protobuf:"varint,2,opt,name=Tac,proto3" json:"Tac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GNodeB) Reset() {
	*x = GNodeB{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GNodeB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNodeB) ProtoMessage() {}

func (x *GNodeB) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNodeB.ProtoReflect.Descriptor instead.
func (*GNodeB) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *GNodeB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GNodeB) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

type UpfInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpfName       string                 `protobuf:"bytes,1,opt,name=UpfName,proto3" json:"UpfName,omitempty"`
	UpfPort       uint32                 `protobuf:"varint,2,opt,name=UpfPort,proto3" json:"UpfPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpfInfo) Reset() {
	*x = UpfInfo{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpfInfo) ProtoMessage() {}

func (x *UpfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpfInfo.ProtoReflect.Descriptor instead.
func (*UpfInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *UpfInfo) GetUpfName() string {
	if x != nil {
		return x.UpfName
	}
	return ""
}

func (x *UpfInfo) GetUpfPort() uint32 {
	if x != nil {
		return x.UpfPort
	}
	return 0
}

type SiteInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SiteName      string                 `protobuf:"bytes,1,opt,name=SiteName,proto3" json:"SiteName,omitempty"`
	Gnb           []*GNodeB              `protobuf:"bytes,2,rep,name=Gnb,proto3" json:"Gnb,omitempty"`
	Plmn          *PlmnId                `protobuf:"bytes,3,opt,name=Plmn,proto3" json:"Plmn,omitempty"`
	Upf           *UpfInfo               `protobuf:"bytes,4,opt,name=Upf,proto3" json:"Upf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiteInfo) Reset() {
	*x = SiteInfo{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteInfo) ProtoMessage() {}

func (x *SiteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteInfo.ProtoReflect.Descriptor instead.
func (*SiteInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *SiteInfo) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *SiteInfo) GetGnb() []*GNodeB {
	if x != nil {
		return x.Gnb
	}
	return nil
}

func (x *SiteInfo) GetPlmn() *PlmnId {
	if x != nil {
		return x.Plmn
	}
	return nil
}

func (x *SiteInfo) GetUpf() *UpfInfo {
	if x != nil {
		return x.Upf
	}
	return nil
}

type AppInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppName       string                 `protobuf:"bytes,1,opt,name=AppName,proto3" json:"AppName,omitempty"`
	Startport     uint32                 `protobuf:"varint,2,opt,name=Startport,proto3" json:"Startport,omitempty"`
	Endport       uint32                 `protobuf:"varint,3,opt,name=Endport,proto3" json:"Endport,omitempty"`
	Protocol      uint32                 `protobuf:"varint,4,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	EndPoint      string                 `protobuf:"bytes,5,opt,name=EndPoint,proto3" json:"EndPoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	mi := &file_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *AppInfo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppInfo) GetStartport() uint32 {
	if x != nil {
		return x.Startport
	}
	return 0
}

func (x *AppInfo) GetEndport() uint32 {
	if x != nil {
		return x.Endport
	}
	return 0
}

func (x *AppInfo) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *AppInfo) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

type NetworkSlice struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Nssai           *NSSAI                 `protobuf:"bytes,2,opt,name=Nssai,proto3" json:"Nssai,omitempty"`
	Qos             *QoS                   `protobuf:"bytes,3,opt,name=Qos,proto3" json:"Qos,omitempty"`
	DeviceGroup     []*DeviceGroup         `protobuf:"bytes,4,rep,name=DeviceGroup,proto3" json:"DeviceGroup,omitempty"`
	Site            *SiteInfo              `protobuf:"bytes,5,opt,name=Site,proto3" json:"Site,omitempty"`
	DenyApps        []string               `protobuf:"bytes,6,rep,name=DenyApps,proto3" json:"DenyApps,omitempty"`
	PermitApps      []string               `protobuf:"bytes,7,rep,name=PermitApps,proto3" json:"PermitApps,omitempty"`
	AppInfo         []*AppInfo             `protobuf:"bytes,8,rep,name=AppInfo,proto3" json:"AppInfo,omitempty"`
	AppFilters      *AppFilterRules        `protobuf:"bytes,9,opt,name=AppFilters,proto3" json:"AppFilters,omitempty"`
	OperationType   OpType                 `protobuf:"varint,10,opt,name=OperationType,proto3,enum=sdcoreConfig.OpType" json:"OperationType,omitempty"`
	AddUpdatedImsis []string               `protobuf:"bytes,11,rep,name=AddUpdatedImsis,proto3" json:"AddUpdatedImsis,omitempty"` //metadata is set in request then send 11,12 in response
	DeletedImsis    []string               `protobuf:"bytes,12,rep,name=DeletedImsis,proto3" json:"DeletedImsis,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkSlice) Reset() {
	*x = NetworkSlice{}
	mi := &file_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSlice) ProtoMessage() {}

func (x *NetworkSlice) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSlice.ProtoReflect.Descriptor instead.
func (*NetworkSlice) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkSlice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkSlice) GetNssai() *NSSAI {
	if x != nil {
		return x.Nssai
	}
	return nil
}

func (x *NetworkSlice) GetQos() *QoS {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *NetworkSlice) GetDeviceGroup() []*DeviceGroup {
	if x != nil {
		return x.DeviceGroup
	}
	return nil
}

func (x *NetworkSlice) GetSite() *SiteInfo {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *NetworkSlice) GetDenyApps() []string {
	if x != nil {
		return x.DenyApps
	}
	return nil
}

func (x *NetworkSlice) GetPermitApps() []string {
	if x != nil {
		return x.PermitApps
	}
	return nil
}

func (x *NetworkSlice) GetAppInfo() []*AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *NetworkSlice) GetAppFilters() *AppFilterRules {
	if x != nil {
		return x.AppFilters
	}
	return nil
}

func (x *NetworkSlice) GetOperationType() OpType {
	if x != nil {
		return x.OperationType
	}
	return OpType_SLICE_ADD
}

func (x *NetworkSlice) GetAddUpdatedImsis() []string {
	if x != nil {
		return x.AddUpdatedImsis
	}
	return nil
}

func (x *NetworkSlice) GetDeletedImsis() []string {
	if x != nil {
		return x.DeletedImsis
	}
	return nil
}

type DeviceGroup struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IpDomainDetails []*IpDomain            `protobuf:"bytes,2,rep,name=IpDomainDetails,proto3" json:"IpDomainDetails,omitempty"`
	Imsi            []string               `protobuf:"bytes,3,rep,name=Imsi,proto3" json:"Imsi,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceGroup) Reset() {
	*x = DeviceGroup{}
	mi := &file_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGroup) ProtoMessage() {}

func (x *DeviceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGroup.ProtoReflect.Descriptor instead.
func (*DeviceGroup) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceGroup) GetIpDomainDetails() []*IpDomain {
	if x != nil {
		return x.IpDomainDetails
	}
	return nil
}

func (x *DeviceGroup) GetImsi() []string {
	if x != nil {
		return x.Imsi
	}
	return nil
}

type IpDomain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DnnName       string                 `protobuf:"bytes,2,opt,name=DnnName,proto3" json:"DnnName,omitempty"`
	UePool        string                 `protobuf:"bytes,3,opt,name=UePool,proto3" json:"UePool,omitempty"`
	DnsPrimary    string                 `protobuf:"bytes,4,opt,name=DnsPrimary,proto3" json:"DnsPrimary,omitempty"`
	Mtu           int32                  `protobuf:"varint,5,opt,name=Mtu,proto3" json:"Mtu,omitempty"`
	UeDnnQos      *UeDnnQosInfo          `protobuf:"bytes,6,opt,name=UeDnnQos,proto3" json:"UeDnnQos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpDomain) Reset() {
	*x = IpDomain{}
	mi := &file_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpDomain) ProtoMessage() {}

func (x *IpDomain) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpDomain.ProtoReflect.Descriptor instead.
func (*IpDomain) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

func (x *IpDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IpDomain) GetDnnName() string {
	if x != nil {
		return x.DnnName
	}
	return ""
}

func (x *IpDomain) GetUePool() string {
	if x != nil {
		return x.UePool
	}
	return ""
}

func (x *IpDomain) GetDnsPrimary() string {
	if x != nil {
		return x.DnsPrimary
	}
	return ""
}

func (x *IpDomain) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *IpDomain) GetUeDnnQos() *UeDnnQosInfo {
	if x != nil {
		return x.UeDnnQos
	}
	return nil
}

type UeDnnQosInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DnnMbrUplink   int64                  `protobuf:"varint,1,opt,name=DnnMbrUplink,proto3" json:"DnnMbrUplink,omitempty"`
	DnnMbrDownlink int64                  `protobuf:"varint,2,opt,name=DnnMbrDownlink,proto3" json:"DnnMbrDownlink,omitempty"`
	TrafficClass   *TrafficClassInfo      `protobuf:"bytes,3,opt,name=TrafficClass,proto3" json:"TrafficClass,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UeDnnQosInfo) Reset() {
	*x = UeDnnQosInfo{}
	mi := &file_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UeDnnQosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeDnnQosInfo) ProtoMessage() {}

func (x *UeDnnQosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeDnnQosInfo.ProtoReflect.Descriptor instead.
func (*UeDnnQosInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *UeDnnQosInfo) GetDnnMbrUplink() int64 {
	if x != nil {
		return x.DnnMbrUplink
	}
	return 0
}

func (x *UeDnnQosInfo) GetDnnMbrDownlink() int64 {
	if x != nil {
		return x.DnnMbrDownlink
	}
	return 0
}

func (x *UeDnnQosInfo) GetTrafficClass() *TrafficClassInfo {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

type TrafficClassInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Qci           int32                  `protobuf:"varint,2,opt,name=Qci,proto3" json:"Qci,omitempty"`
	Arp           int32                  `protobuf:"varint,3,opt,name=Arp,proto3" json:"Arp,omitempty"`
	Pdb           int32                  `protobuf:"varint,4,opt,name=Pdb,proto3" json:"Pdb,omitempty"`
	Pelr          int32                  `protobuf:"varint,5,opt,name=Pelr,proto3" json:"Pelr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficClassInfo) Reset() {
	*x = TrafficClassInfo{}
	mi := &file_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficClassInfo) ProtoMessage() {}

func (x *TrafficClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficClassInfo.ProtoReflect.Descriptor instead.
func (*TrafficClassInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{11}
}

func (x *TrafficClassInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficClassInfo) GetQci() int32 {
	if x != nil {
		return x.Qci
	}
	return 0
}

func (x *TrafficClassInfo) GetArp() int32 {
	if x != nil {
		return x.Arp
	}
	return 0
}

func (x *TrafficClassInfo) GetPdb() int32 {
	if x != nil {
		return x.Pdb
	}
	return 0
}

func (x *TrafficClassInfo) GetPelr() int32 {
	if x != nil {
		return x.Pelr
	}
	return 0
}

type PccFlowInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FlowDesc        string                 `protobuf:"bytes,1,opt,name=FlowDesc,proto3" json:"FlowDesc,omitempty"` //packet filters of the IP flow
	TosTrafficClass string                 `protobuf:"bytes,2,opt,name=TosTrafficClass,proto3" json:"TosTrafficClass,omitempty"`
	FlowDir         PccFlowDirection       `protobuf:"varint,3,opt,name=FlowDir,proto3,enum=sdcoreConfig.PccFlowDirection" json:"FlowDir,omitempty"`
	FlowStatus      PccFlowStatus          `protobuf:"varint,4,opt,name=FlowStatus,proto3,enum=sdcoreConfig.PccFlowStatus" json:"FlowStatus,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PccFlowInfo) Reset() {
	*x = PccFlowInfo{}
	mi := &file_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PccFlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PccFlowInfo) ProtoMessage() {}

func (x *PccFlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PccFlowInfo.ProtoReflect.Descriptor instead.
func (*PccFlowInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{12}
}

func (x *PccFlowInfo) GetFlowDesc() string {
	if x != nil {
		return x.FlowDesc
	}
	return ""
}

func (x *PccFlowInfo) GetTosTrafficClass() string {
	if x != nil {
		return x.TosTrafficClass
	}
	return ""
}

func (x *PccFlowInfo) GetFlowDir() PccFlowDirection {
	if x != nil {
		return x.FlowDir
	}
	return PccFlowDirection_DOWNLINK
}

func (x *PccFlowInfo) GetFlowStatus() PccFlowStatus {
	if x != nil {
		return x.FlowStatus
	}
	return PccFlowStatus_ENABLED_UPLINK
}

type PccArp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PL            int32                  `protobuf:"varint,1,opt,name=PL,proto3" json:"PL,omitempty"`
	PC            PccArpPc               `protobuf:"varint,2,opt,name=PC,proto3,enum=sdcoreConfig.PccArpPc" json:"PC,omitempty"`
	PV            PccArpPv               `protobuf:"varint,3,opt,name=PV,proto3,enum=sdcoreConfig.PccArpPv" json:"PV,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PccArp) Reset() {
	*x = PccArp{}
	mi := &file_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PccArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PccArp) ProtoMessage() {}

func (x *PccArp) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PccArp.ProtoReflect.Descriptor instead.
func (*PccArp) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{13}
}

func (x *PccArp) GetPL() int32 {
	if x != nil {
		return x.PL
	}
	return 0
}

func (x *PccArp) GetPC() PccArpPc {
	if x != nil {
		return x.PC
	}
	return PccArpPc_NOT_PREEMPT
}

func (x *PccArp) GetPV() PccArpPv {
	if x != nil {
		return x.PV
	}
	return PccArpPv_NOT_PREEMPTABLE
}

type PccRuleQos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Var5Qi        int32                  `protobuf:"varint,1,opt,name=Var5qi,proto3" json:"Var5qi,omitempty"`
	MaxbrUl       int32                  `protobuf:"varint,2,opt,name=MaxbrUl,proto3" json:"MaxbrUl,omitempty"`
	MaxbrDl       int32                  `protobuf:"varint,3,opt,name=MaxbrDl,proto3" json:"MaxbrDl,omitempty"`
	GbrUl         int32                  `protobuf:"varint,4,opt,name=GbrUl,proto3" json:"GbrUl,omitempty"`
	GbrDl         int32                  `protobuf:"varint,5,opt,name=GbrDl,proto3" json:"GbrDl,omitempty"`
	Arp           *PccArp                `protobuf:"bytes,6,opt,name=Arp,proto3" json:"Arp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PccRuleQos) Reset() {
	*x = PccRuleQos{}
	mi := &file_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PccRuleQos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PccRuleQos) ProtoMessage() {}

func (x *PccRuleQos) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PccRuleQos.ProtoReflect.Descriptor instead.
func (*PccRuleQos) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{14}
}

func (x *PccRuleQos) GetVar5Qi() int32 {
	if x != nil {
		return x.Var5Qi
	}
	return 0
}

func (x *PccRuleQos) GetMaxbrUl() int32 {
	if x != nil {
		return x.MaxbrUl
	}
	return 0
}

func (x *PccRuleQos) GetMaxbrDl() int32 {
	if x != nil {
		return x.MaxbrDl
	}
	return 0
}

func (x *PccRuleQos) GetGbrUl() int32 {
	if x != nil {
		return x.GbrUl
	}
	return 0
}

func (x *PccRuleQos) GetGbrDl() int32 {
	if x != nil {
		return x.GbrDl
	}
	return 0
}

func (x *PccRuleQos) GetArp() *PccArp {
	if x != nil {
		return x.Arp
	}
	return nil
}

type PccRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlowInfos     []*PccFlowInfo         `protobuf:"bytes,1,rep,name=FlowInfos,proto3" json:"FlowInfos,omitempty"`
	RuleId        string                 `protobuf:"bytes,2,opt,name=RuleId,proto3" json:"RuleId,omitempty"` //Name of Rule
	Qos           *PccRuleQos            `protobuf:"bytes,3,opt,name=Qos,proto3" json:"Qos,omitempty"`
	Priority      int32                  `protobuf:"varint,4,opt,name=Priority,proto3" json:"Priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PccRule) Reset() {
	*x = PccRule{}
	mi := &file_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PccRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PccRule) ProtoMessage() {}

func (x *PccRule) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PccRule.ProtoReflect.Descriptor instead.
func (*PccRule) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{15}
}

func (x *PccRule) GetFlowInfos() []*PccFlowInfo {
	if x != nil {
		return x.FlowInfos
	}
	return nil
}

func (x *PccRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *PccRule) GetQos() *PccRuleQos {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *PccRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type AppFilterRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PccRuleBase   []*PccRule             `protobuf:"bytes,1,rep,name=PccRuleBase,proto3" json:"PccRuleBase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppFilterRules) Reset() {
	*x = AppFilterRules{}
	mi := &file_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppFilterRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppFilterRules) ProtoMessage() {}

func (x *AppFilterRules) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppFilterRules.ProtoReflect.Descriptor instead.
func (*AppFilterRules) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{16}
}

func (x *AppFilterRules) GetPccRuleBase() []*PccRule {
	if x != nil {
		return x.PccRuleBase
	}
	return nil
}

type NetworkSliceRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RestartCounter    uint32                 `protobuf:"varint,1,opt,name=RestartCounter,proto3" json:"RestartCounter,omitempty"`
	ClientId          string                 `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	ImsiRequested     bool                   `protobuf:"varint,3,opt,name=ImsiRequested,proto3" json:"ImsiRequested,omitempty"`
	MetadataRequested bool                   `protobuf:"varint,4,opt,name=MetadataRequested,proto3" json:"MetadataRequested,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkSliceRequest) Reset() {
	*x = NetworkSliceRequest{}
	mi := &file_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSliceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSliceRequest) ProtoMessage() {}

func (x *NetworkSliceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSliceRequest.ProtoReflect.Descriptor instead.
func (*NetworkSliceRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{17}
}

func (x *NetworkSliceRequest) GetRestartCounter() uint32 {
	if x != nil {
		return x.RestartCounter
	}
	return 0
}

func (x *NetworkSliceRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NetworkSliceRequest) GetImsiRequested() bool {
	if x != nil {
		return x.ImsiRequested
	}
	return false
}

func (x *NetworkSliceRequest) GetMetadataRequested() bool {
	if x != nil {
		return x.MetadataRequested
	}
	return false
}

type NetworkSliceResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RestartCounter uint32                 `protobuf:"varint,1,opt,name=RestartCounter,proto3" json:"RestartCounter,omitempty"`
	NetworkSlice   []*NetworkSlice        `protobuf:"bytes,2,rep,name=NetworkSlice,proto3" json:"NetworkSlice,omitempty"`
	ConfigUpdated  uint32                 `protobuf:"varint,3,opt,name=ConfigUpdated,proto3" json:"ConfigUpdated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkSliceResponse) Reset() {
	*x = NetworkSliceResponse{}
	mi := &file_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSliceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSliceResponse) ProtoMessage() {}

func (x *NetworkSliceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSliceResponse.ProtoReflect.Descriptor instead.
func (*NetworkSliceResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkSliceResponse) GetRestartCounter() uint32 {
	if x != nil {
		return x.RestartCounter
	}
	return 0
}

func (x *NetworkSliceResponse) GetNetworkSlice() []*NetworkSlice {
	if x != nil {
		return x.NetworkSlice
	}
	return nil
}

func (x *NetworkSliceResponse) GetConfigUpdated() uint32 {
	if x != nil {
		return x.ConfigUpdated
	}
	return 0
}

var File_config_proto protoreflect.FileDescriptor

const file_config_proto_rawDesc = "" +
	"\n" +
	"\fconfig.proto\x12\fsdcoreConfig\",\n" +
	"\x06PlmnId\x12\x10\n" +
	"\x03mcc\x18\x01 \x01(\tR\x03mcc\x12\x10\n" +
	"\x03mnc\x18\x02 \x01(\tR\x03mnc\")\n" +
	"\x05NSSAI\x12\x10\n" +
	"\x03Sst\x18\x01 \x01(\tR\x03Sst\x12\x0e\n" +
	"\x02Sd\x18\x02 \x01(\tR\x02Sd\"]\n" +
	"\x03QoS\x12\x16\n" +
	"\x06uplink\x18\x01 \x01(\x05R\x06uplink\x12\x1a\n" +
	"\bdownlink\x18\x02 \x01(\x05R\bdownlink\x12\"\n" +
	"\ftrafficClass\x18\x03 \x01(\tR\ftrafficClass\".\n" +
	"\x06GNodeB\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x10\n" +
	"\x03Tac\x18\x02 \x01(\x05R\x03Tac\"=\n" +
	"\aUpfInfo\x12\x18\n" +
	"\aUpfName\x18\x01 \x01(\tR\aUpfName\x12\x18\n" +
	"\aUpfPort\x18\x02 \x01(\rR\aUpfPort\"\xa1\x01\n" +
	"\bSiteInfo\x12\x1a\n" +
	"\bSiteName\x18\x01 \x01(\tR\bSiteName\x12&\n" +
	"\x03Gnb\x18\x02 \x03(\v2\x14.sdcoreConfig.GNodeBR\x03Gnb\x12(\n" +
	"\x04Plmn\x18\x03 \x01(\v2\x14.sdcoreConfig.PlmnIdR\x04Plmn\x12'\n" +
	"\x03Upf\x18\x04 \x01(\v2\x15.sdcoreConfig.UpfInfoR\x03Upf\"\x93\x01\n" +
	"\aAppInfo\x12\x18\n" +
	"\aAppName\x18\x01 \x01(\tR\aAppName\x12\x1c\n" +
	"\tStartport\x18\x02 \x01(\rR\tStartport\x12\x18\n" +
	"\aEndport\x18\x03 \x01(\rR\aEndport\x12\x1a\n" +
	"\bProtocol\x18\x04 \x01(\rR\bProtocol\x12\x1a\n" +
	"\bEndPoint\x18\x05 \x01(\tR\bEndPoint\"\x90\x04\n" +
	"\fNetworkSlice\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12)\n" +
	"\x05Nssai\x18\x02 \x01(\v2\x13.sdcoreConfig.NSSAIR\x05Nssai\x12#\n" +
	"\x03Qos\x18\x03 \x01(\v2\x11.sdcoreConfig.QoSR\x03Qos\x12;\n" +
	"\vDeviceGroup\x18\x04 \x03(\v2\x19.sdcoreConfig.DeviceGroupR\vDeviceGroup\x12*\n" +
	"\x04Site\x18\x05 \x01(\v2\x16.sdcoreConfig.SiteInfoR\x04Site\x12\x1a\n" +
	"\bDenyApps\x18\x06 \x03(\tR\bDenyApps\x12\x1e\n" +
	"\n" +
	"PermitApps\x18\a \x03(\tR\n" +
	"PermitApps\x12/\n" +
	"\aAppInfo\x18\b \x03(\v2\x15.sdcoreConfig.AppInfoR\aAppInfo\x12<\n" +
	"\n" +
	"AppFilters\x18\t \x01(\v2\x1c.sdcoreConfig.AppFilterRulesR\n" +
	"AppFilters\x12:\n" +
	"\rOperationType\x18\n" +
	" \x01(\x0e2\x14.sdcoreConfig.OpTypeR\rOperationType\x12(\n" +
	"\x0fAddUpdatedImsis\x18\v \x03(\tR\x0fAddUpdatedImsis\x12\"\n" +
	"\fDeletedImsis\x18\f \x03(\tR\fDeletedImsis\"w\n" +
	"\vDeviceGroup\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12@\n" +
	"\x0fIpDomainDetails\x18\x02 \x03(\v2\x16.sdcoreConfig.IpDomainR\x0fIpDomainDetails\x12\x12\n" +
	"\x04Imsi\x18\x03 \x03(\tR\x04Imsi\"\xba\x01\n" +
	"\bIpDomain\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x18\n" +
	"\aDnnName\x18\x02 \x01(\tR\aDnnName\x12\x16\n" +
	"\x06UePool\x18\x03 \x01(\tR\x06UePool\x12\x1e\n" +
	"\n" +
	"DnsPrimary\x18\x04 \x01(\tR\n" +
	"DnsPrimary\x12\x10\n" +
	"\x03Mtu\x18\x05 \x01(\x05R\x03Mtu\x126\n" +
	"\bUeDnnQos\x18\x06 \x01(\v2\x1a.sdcoreConfig.UeDnnQosInfoR\bUeDnnQos\"\x9e\x01\n" +
	"\fUeDnnQosInfo\x12\"\n" +
	"\fDnnMbrUplink\x18\x01 \x01(\x03R\fDnnMbrUplink\x12&\n" +
	"\x0eDnnMbrDownlink\x18\x02 \x01(\x03R\x0eDnnMbrDownlink\x12B\n" +
	"\fTrafficClass\x18\x03 \x01(\v2\x1e.sdcoreConfig.TrafficClassInfoR\fTrafficClass\"p\n" +
	"\x10TrafficClassInfo\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x10\n" +
	"\x03Qci\x18\x02 \x01(\x05R\x03Qci\x12\x10\n" +
	"\x03Arp\x18\x03 \x01(\x05R\x03Arp\x12\x10\n" +
	"\x03Pdb\x18\x04 \x01(\x05R\x03Pdb\x12\x12\n" +
	"\x04Pelr\x18\x05 \x01(\x05R\x04Pelr\"\xca\x01\n" +
	"\vPccFlowInfo\x12\x1a\n" +
	"\bFlowDesc\x18\x01 \x01(\tR\bFlowDesc\x12(\n" +
	"\x0fTosTrafficClass\x18\x02 \x01(\tR\x0fTosTrafficClass\x128\n" +
	"\aFlowDir\x18\x03 \x01(\x0e2\x1e.sdcoreConfig.PccFlowDirectionR\aFlowDir\x12;\n" +
	"\n" +
	"FlowStatus\x18\x04 \x01(\x0e2\x1b.sdcoreConfig.PccFlowStatusR\n" +
	"FlowStatus\"h\n" +
	"\x06PccArp\x12\x0e\n" +
	"\x02PL\x18\x01 \x01(\x05R\x02PL\x12&\n" +
	"\x02PC\x18\x02 \x01(\x0e2\x16.sdcoreConfig.PccArpPcR\x02PC\x12&\n" +
	"\x02PV\x18\x03 \x01(\x0e2\x16.sdcoreConfig.PccArpPvR\x02PV\"\xac\x01\n" +
	"\n" +
	"PccRuleQos\x12\x16\n" +
	"\x06Var5qi\x18\x01 \x01(\x05R\x06Var5qi\x12\x18\n" +
	"\aMaxbrUl\x18\x02 \x01(\x05R\aMaxbrUl\x12\x18\n" +
	"\aMaxbrDl\x18\x03 \x01(\x05R\aMaxbrDl\x12\x14\n" +
	"\x05GbrUl\x18\x04 \x01(\x05R\x05GbrUl\x12\x14\n" +
	"\x05GbrDl\x18\x05 \x01(\x05R\x05GbrDl\x12&\n" +
	"\x03Arp\x18\x06 \x01(\v2\x14.sdcoreConfig.PccArpR\x03Arp\"\xa2\x01\n" +
	"\aPccRule\x127\n" +
	"\tFlowInfos\x18\x01 \x03(\v2\x19.sdcoreConfig.PccFlowInfoR\tFlowInfos\x12\x16\n" +
	"\x06RuleId\x18\x02 \x01(\tR\x06RuleId\x12*\n" +
	"\x03Qos\x18\x03 \x01(\v2\x18.sdcoreConfig.PccRuleQosR\x03Qos\x12\x1a\n" +
	"\bPriority\x18\x04 \x01(\x05R\bPriority\"I\n" +
	"\x0eAppFilterRules\x127\n" +
	"\vPccRuleBase\x18\x01 \x03(\v2\x15.sdcoreConfig.PccRuleR\vPccRuleBase\"\xad\x01\n" +
	"\x13NetworkSliceRequest\x12&\n" +
	"\x0eRestartCounter\x18\x01 \x01(\rR\x0eRestartCounter\x12\x1a\n" +
	"\bClientId\x18\x02 \x01(\tR\bClientId\x12$\n" +
	"\rImsiRequested\x18\x03 \x01(\bR\rImsiRequested\x12,\n" +
	"\x11MetadataRequested\x18\x04 \x01(\bR\x11MetadataRequested\"\xa4\x01\n" +
	"\x14NetworkSliceResponse\x12&\n" +
	"\x0eRestartCounter\x18\x01 \x01(\rR\x0eRestartCounter\x12>\n" +
	"\fNetworkSlice\x18\x02 \x03(\v2\x1a.sdcoreConfig.NetworkSliceR\fNetworkSlice\x12$\n" +
	"\rConfigUpdated\x18\x03 \x01(\rR\rConfigUpdated*\"\n" +
	"\x06Status\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\v\n" +
	"\aFAILURE\x10\x01*P\n" +
	"\x10PccFlowDirection\x12\f\n" +
	"\bDOWNLINK\x10\x00\x12\n" +
	"\n" +
	"\x06UPLINK\x10\x01\x12\x11\n" +
	"\rBIDIRECTIONAL\x10\x02\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x03*,\n" +
	"\bPccArpPc\x12\x0f\n" +
	"\vNOT_PREEMPT\x10\x00\x12\x0f\n" +
	"\vMAY_PREEMPT\x10\x01*0\n" +
	"\bPccArpPv\x12\x13\n" +
	"\x0fNOT_PREEMPTABLE\x10\x00\x12\x0f\n" +
	"\vPREEMPTABLE\x10\x01*4\n" +
	"\n" +
	"PccFlowTos\x12\n" +
	"\n" +
	"\x06HOPOPT\x10\x00\x12\b\n" +
	"\x04ICMP\x10\x01\x12\a\n" +
	"\x03TCP\x10\x06\x12\a\n" +
	"\x03UDP\x10\x11*a\n" +
	"\rPccFlowStatus\x12\x12\n" +
	"\x0eENABLED_UPLINK\x10\x00\x12\x14\n" +
	"\x10ENABLED_DOWNLINK\x10\x01\x12\v\n" +
	"\aENABLED\x10\x02\x12\f\n" +
	"\bDISABLED\x10\x03\x12\v\n" +
	"\aREMOVED\x10\x04*;\n" +
	"\x06OpType\x12\r\n" +
	"\tSLICE_ADD\x10\x00\x12\x10\n" +
	"\fSLICE_UPDATE\x10\x01\x12\x10\n" +
	"\fSLICE_DELETE\x10\x022\xcf\x01\n" +
	"\rConfigService\x12Z\n" +
	"\x0fGetNetworkSlice\x12!.sdcoreConfig.NetworkSliceRequest\x1a\".sdcoreConfig.NetworkSliceResponse\"\x00\x12b\n" +
	"\x15NetworkSliceSubscribe\x12!.sdcoreConfig.NetworkSliceRequest\x1a\".sdcoreConfig.NetworkSliceResponse\"\x000\x01B\x10Z\x0e./sdcoreConfigb\x06proto3"

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_config_proto_goTypes = []any{
	(Status)(0),                  // 0: sdcoreConfig.Status
	(PccFlowDirection)(0),        // 1: sdcoreConfig.PccFlowDirection
	(PccArpPc)(0),                // 2: sdcoreConfig.PccArpPc
	(PccArpPv)(0),                // 3: sdcoreConfig.PccArpPv
	(PccFlowTos)(0),              // 4: sdcoreConfig.PccFlowTos
	(PccFlowStatus)(0),           // 5: sdcoreConfig.PccFlowStatus
	(OpType)(0),                  // 6: sdcoreConfig.OpType
	(*PlmnId)(nil),               // 7: sdcoreConfig.PlmnId
	(*NSSAI)(nil),                // 8: sdcoreConfig.NSSAI
	(*QoS)(nil),                  // 9: sdcoreConfig.QoS
	(*GNodeB)(nil),               // 10: sdcoreConfig.GNodeB
	(*UpfInfo)(nil),              // 11: sdcoreConfig.UpfInfo
	(*SiteInfo)(nil),             // 12: sdcoreConfig.SiteInfo
	(*AppInfo)(nil),              // 13: sdcoreConfig.AppInfo
	(*NetworkSlice)(nil),         // 14: sdcoreConfig.NetworkSlice
	(*DeviceGroup)(nil),          // 15: sdcoreConfig.DeviceGroup
	(*IpDomain)(nil),             // 16: sdcoreConfig.IpDomain
	(*UeDnnQosInfo)(nil),         // 17: sdcoreConfig.UeDnnQosInfo
	(*TrafficClassInfo)(nil),     // 18: sdcoreConfig.TrafficClassInfo
	(*PccFlowInfo)(nil),          // 19: sdcoreConfig.PccFlowInfo
	(*PccArp)(nil),               // 20: sdcoreConfig.PccArp
	(*PccRuleQos)(nil),           // 21: sdcoreConfig.PccRuleQos
	(*PccRule)(nil),              // 22: sdcoreConfig.PccRule
	(*AppFilterRules)(nil),       // 23: sdcoreConfig.AppFilterRules
	(*NetworkSliceRequest)(nil),  // 24: sdcoreConfig.NetworkSliceRequest
	(*NetworkSliceResponse)(nil), // 25: sdcoreConfig.NetworkSliceResponse
}
var file_config_proto_depIdxs = []int32{
	10, // 0: sdcoreConfig.SiteInfo.Gnb:type_name -> sdcoreConfig.GNodeB
	7,  // 1: sdcoreConfig.SiteInfo.Plmn:type_name -> sdcoreConfig.PlmnId
	11, // 2: sdcoreConfig.SiteInfo.Upf:type_name -> sdcoreConfig.UpfInfo
	8,  // 3: sdcoreConfig.NetworkSlice.Nssai:type_name -> sdcoreConfig.NSSAI
	9,  // 4: sdcoreConfig.NetworkSlice.Qos:type_name -> sdcoreConfig.QoS
	15, // 5: sdcoreConfig.NetworkSlice.DeviceGroup:type_name -> sdcoreConfig.DeviceGroup
	12, // 6: sdcoreConfig.NetworkSlice.Site:type_name -> sdcoreConfig.SiteInfo
	13, // 7: sdcoreConfig.NetworkSlice.AppInfo:type_name -> sdcoreConfig.AppInfo
	23, // 8: sdcoreConfig.NetworkSlice.AppFilters:type_name -> sdcoreConfig.AppFilterRules
	6,  // 9: sdcoreConfig.NetworkSlice.OperationType:type_name -> sdcoreConfig.OpType
	16, // 10: sdcoreConfig.DeviceGroup.IpDomainDetails:type_name -> sdcoreConfig.IpDomain
	17, // 11: sdcoreConfig.IpDomain.UeDnnQos:type_name -> sdcoreConfig.UeDnnQosInfo
	18, // 12: sdcoreConfig.UeDnnQosInfo.TrafficClass:type_name -> sdcoreConfig.TrafficClassInfo
	1,  // 13: sdcoreConfig.PccFlowInfo.FlowDir:type_name -> sdcoreConfig.PccFlowDirection
	5,  // 14: sdcoreConfig.PccFlowInfo.FlowStatus:type_name -> sdcoreConfig.PccFlowStatus
	2,  // 15: sdcoreConfig.PccArp.PC:type_name -> sdcoreConfig.PccArpPc
	3,  // 16: sdcoreConfig.PccArp.PV:type_name -> sdcoreConfig.PccArpPv
	20, // 17: sdcoreConfig.PccRuleQos.Arp:type_name -> sdcoreConfig.PccArp
	19, // 18: sdcoreConfig.PccRule.FlowInfos:type_name -> sdcoreConfig.PccFlowInfo
	21, // 19: sdcoreConfig.PccRule.Qos:type_name -> sdcoreConfig.PccRuleQos
	22, // 20: sdcoreConfig.AppFilterRules.PccRuleBase:type_name -> sdcoreConfig.PccRule
	14, // 21: sdcoreConfig.NetworkSliceResponse.NetworkSlice:type_name -> sdcoreConfig.NetworkSlice
	24, // 22: sdcoreConfig.ConfigService.GetNetworkSlice:input_type -> sdcoreConfig.NetworkSliceRequest
	24, // 23: sdcoreConfig.ConfigService.NetworkSliceSubscribe:input_type -> sdcoreConfig.NetworkSliceRequest
	25, // 24: sdcoreConfig.ConfigService.GetNetworkSlice:output_type -> sdcoreConfig.NetworkSliceResponse
	25, // 25: sdcoreConfig.ConfigService.NetworkSliceSubscribe:output_type -> sdcoreConfig.NetworkSliceResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
